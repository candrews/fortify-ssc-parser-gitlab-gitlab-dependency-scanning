/*******************************************************************************
 * (c) Copyright 2020 Micro Focus or one of its affiliates
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the 
 * "Software"), to deal in the Software without restriction, including without 
 * limitation the rights to use, copy, modify, merge, publish, distribute, 
 * sublicense, and/or sell copies of the Software, and to permit persons to 
 * whom the Software is furnished to do so, subject to the following 
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 ******************************************************************************/
package com.fortify.ssc.parser.gitlabdependencyscanning.domain;

import com.fasterxml.jackson.annotation.JsonProperty;

import lombok.Getter;

/** A GitLab Dependency Scanning Vulnerability.
 *
 * <a href="https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/dependency-scanning-report-format.json">JSON Specification</a>
 */
@Getter
public class Vulnerability {
	public static enum Severity {
		@JsonProperty("Unknown") UNKNOWN,
		@JsonProperty("Info") INFO,
		@JsonProperty("Low") LOW,
		@JsonProperty("Medium") MEDIUM,
		@JsonProperty("High") HIGH,
		@JsonProperty("Critical") CRITICAL
	}

	public static enum Confidence {
		@JsonProperty("Ignore") IGNORE,
		@JsonProperty("Unknown") UNKNOWN,
		@JsonProperty("Experimental") EXPERIMENTAL,
		@JsonProperty("Low") LOW,
		@JsonProperty("Medium") MEDIUM,
		@JsonProperty("High") HIGH,
		@JsonProperty("Confirmed") CONFIRMED
	}
	
	/**
	 * Describes the scanner used to find this vulnerability.
	 *
	 */
	@Getter
	public static class Scanner {
		/**
		 * The scanner's ID, as a snake_case string.
		 */
		@JsonProperty(required = true) private String id;
		
		/**
		 * Human-readable name of the scanner.
		 */
		@JsonProperty(required = true) private String name;
	}

	/**
	 * Reference that identifies a vulnerability on internal or external databases.
	 *
	 */
	@Getter
	public static class Identifier {
		/**
		 * for example, cve, cwe, osvdb, usn, or an analyzer-dependent type such as gemnasium).
		 */
		@JsonProperty(required = true) private String type;
		/**
		 * Human-readable name of the identifier.
		 */
		@JsonProperty(required = true) private String name;
		/**
		 * URL of the identifier's documentation.
		 */
		@JsonProperty(required = true) private String url;
		/**
		 * Value of the identifier, for matching purpose.
		 */
		@JsonProperty(required = true) private String value;
	}
	
	/**
	 * Identifies the vulnerability's location.
	 *
	 */
	@Getter
	public static class Location {
		
		/**
		 * Describes the dependency of a project where the vulnerability is located.
		 *
		 */
		@Getter
		public static class Dependency {
			/**
			 * Provides information on the package where the vulnerability is located."
			 *
			 */
			@Getter
			public static class Package {
				
				/**
				 * Name of the package where the vulnerability is located.
				 */
				@JsonProperty String name;
			}
			
			@Getter
			public static class DependencyPath {
				/**
				 * ID that is unique in the scope of a parent object, and specific to the resource type.
				 */
				@JsonProperty Integer iid;
			}
			
			@JsonProperty("package") private Package packageInfo;
			
			/**
			 * Version of the vulnerable package.
			 */
			@JsonProperty private String version;
			
			/**
			 * ID that identifies the dependency in the scope of a dependency file.
			 */
			@JsonProperty private Integer iid;
			
			/**
			 * Tells whether this is a direct, top-level dependency of the scanned project.
			 */
			@JsonProperty private Boolean direct;
			
			/**
			 * Ancestors of the dependency, starting from a direct project dependency, and ending with an immediate parent of the dependency. The dependency itself is excluded from the path. Direct dependencies have no path.
			 */
			@JsonProperty private DependencyPath[] dependencyPath;
		}
		
		/**
		 * Path to the manifest or lock file where the dependency is declared (such as yarn.lock).
		 */
		@JsonProperty(required = true) private String file;
		
		/**
		 * Describes the dependency of a project where the vulnerability is located.
		 */
		@JsonProperty(required = true) private Dependency dependency;
	}
	
	/**
	 * References to external documentation or articles that describe the vulnerability.
	 *
	 */
	@Getter
	public static class Link {
		/**
		 * URL of the vulnerability details document.
		 */
		@JsonProperty private String name;
		
		/**
		 * Human-readable name of the scanner.
		 */
		@JsonProperty(required = true) private String url;
	}
	
    /**
     * Unique identifier of the vulnerability. This is recommended to be a UUID.
     */
    @JsonProperty private String id;
    
    /**
     * Describes where this vulnerability belongs (for example, SAST, Dependency Scanning, and so on).
     */
    @JsonProperty(required = true) private String category;
    
    /**
     * The name of the vulnerability. This must not include the finding's specific information.
     */
    @JsonProperty private String name;
    
    /**
     * A short text section that describes the vulnerability. This may include the finding's specific information.
     */
    @JsonProperty private String message;
    
    /**
     * A long text section describing the vulnerability more fully.
     */
    @JsonProperty private String description;
    
    /**
     * (Deprecated - use vulnerabilities[].id instead) A fingerprint string value that represents a concrete finding. This is used to determine whether two findings are same, which may not be 100% accurate. Note that this is NOT a CVE as described by https://cve.mitre.org/.
     */
    @Deprecated
    @JsonProperty(required = true) private String cve;
    
    /**
     * How much the vulnerability impacts the software. Possible values are Info, Unknown, Low, Medium, High, or Critical. Note that some analyzers may not report all these possible values.
     */
    @JsonProperty private Severity severity;
    
    /**
     * How reliable the vulnerability's assessment is. Possible values are Ignore, Unknown, Experimental, Low, Medium, High, and Confirmed. Note that some analyzers may not report all these possible values.
     */
    @JsonProperty private Confidence confidence;
    
    /**
     * Explanation of how to fix the vulnerability.
     */
    @JsonProperty private String solution;
    
    /**
     * Describes the scanner used to find this vulnerability.
     */
    @JsonProperty(required = true) private Scanner scanner;
    
    /**
     * An ordered array of references that identify a vulnerability on internal or external databases. The first identifier is the Primary Identifier, which has special meaning.
     */
    @JsonProperty(required = true) private Identifier[] identifiers;
    
    /**
     * An array of references to external documentation or articles that describe the vulnerability.
     */
    @JsonProperty private Link[] links;
    
    /**
     * Identifies the vulnerability's location.
     */
    @JsonProperty(required = true) private Location location;
}
